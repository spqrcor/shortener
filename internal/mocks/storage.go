// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	storage "shortener/internal/storage"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorage) Add(ctx context.Context, inputURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, inputURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStorageMockRecorder) Add(ctx, inputURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorage)(nil).Add), ctx, inputURL)
}

// BatchAdd mocks base method.
func (m *MockStorage) BatchAdd(ctx context.Context, inputURLs []storage.BatchInputParams) ([]storage.BatchOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAdd", ctx, inputURLs)
	ret0, _ := ret[0].([]storage.BatchOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAdd indicates an expected call of BatchAdd.
func (mr *MockStorageMockRecorder) BatchAdd(ctx, inputURLs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAdd", reflect.TypeOf((*MockStorage)(nil).BatchAdd), ctx, inputURLs)
}

// Find mocks base method.
func (m *MockStorage) Find(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockStorageMockRecorder) Find(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStorage)(nil).Find), ctx, key)
}

// FindByUser mocks base method.
func (m *MockStorage) FindByUser(ctx context.Context) ([]storage.FindByUserOutputParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", ctx)
	ret0, _ := ret[0].([]storage.FindByUserOutputParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockStorageMockRecorder) FindByUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockStorage)(nil).FindByUser), ctx)
}

// Remove mocks base method.
func (m *MockStorage) Remove(ctx context.Context, UserID uuid.UUID, shorts []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, UserID, shorts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockStorageMockRecorder) Remove(ctx, UserID, shorts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStorage)(nil).Remove), ctx, UserID, shorts)
}

// ShutDown mocks base method.
func (m *MockStorage) ShutDown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockStorageMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockStorage)(nil).ShutDown))
}

// Stat mocks base method.
func (m *MockStorage) Stat(ctx context.Context) (storage.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx)
	ret0, _ := ret[0].(storage.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockStorageMockRecorder) Stat(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockStorage)(nil).Stat), ctx)
}
